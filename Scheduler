#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Process {
    int id, burstTime, waitingTime, turnaroundTime;
    Process(int id, int bt) : id(id), burstTime(bt), waitingTime(0), turnaroundTime(0) {}
};

void calculateFCFS(vector<Process>& processes) {
    int completionTime = 0;
    for (auto& p : processes) {
        p.waitingTime = completionTime;
        p.turnaroundTime = p.waitingTime + p.burstTime;
        completionTime += p.burstTime;
    }
}

void calculateSJF(vector<Process>& processes) {
    sort(processes.begin(), processes.end(), [](Process a, Process b) {
        return a.burstTime < b.burstTime;
    });
    calculateFCFS(processes);
}

void printResults(const string& type, const vector<Process>& processes) {
    cout << "----- " << type << " -----\n";
    cout << "Process | Waiting Time | Turnaround Time\n";
    for (const auto& p : processes) {
        cout << "  P" << p.id << "    |      " << p.waitingTime << "      |       " << p.turnaroundTime << "\n";
    }
}

int main() {
    vector<Process> processesFCFS = {
        {1, 2}, {2, 1}, {3, 8}, {4, 4}, {5, 5}
    };
    vector<Process> processesSJF = processesFCFS;
    
    calculateFCFS(processesFCFS);
    printResults("FCFS", processesFCFS);
    
    calculateSJF(processesSJF);
    printResults("SJF", processesSJF);
    
    return 0;
}
